#!/usr/bin/env sh

##############################################################################
##
##  Gradle start up script for POSIX generated by Gradle.
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname "$PRG"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS="-Xmx64m -Xms64m"

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support functions.
# Unset irrelevant variables.
unset -f cd

cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* ) cygwin=true ;;
  MINGW* | MSYS* ) msys=true ;;
  Darwin* ) darwin=true ;;
  NONSTOP* ) nonstop=true ;;
esac

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "true" -o "$darwin" = "true" -o "$msys" = "true" ] ; then
    ulimit -n 2048 >/dev/null 2>&1
else
    if [ "$MAX_FD" != "maximum" -a "$MAX_FD" != "" ] ; then
        ulimit -n $MAX_FD >/dev/null 2>&1 || warn "Could not set maximum file descriptor limit: $MAX_FD"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS -Xdock:name=$APP_NAME -Xdock:icon=$APP_HOME/media/gradle.icns"
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP=",";
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c '^-'`
        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`=`echo "$arg" | sed 's/"/\\"/g'`
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
BASE64_JAR=$APP_HOME/gradle/wrapper/gradle-wrapper.jar.base64

if [ ! -f "$CLASSPATH" ] && [ -f "$BASE64_JAR" ]; then
    restored=false
    jar_dir=`dirname "$CLASSPATH"`
    mkdir -p "$jar_dir"

    if command -v base64 >/dev/null 2>&1; then
        if base64 --decode "$BASE64_JAR" > "$CLASSPATH" 2>/dev/null; then
            restored=true
        elif base64 -d "$BASE64_JAR" > "$CLASSPATH" 2>/dev/null; then
            restored=true
        else
            rm -f "$CLASSPATH"
        fi
    fi

    if [ "$restored" = "false" ]; then
        for py_cmd in python3 python; do
            if command -v "$py_cmd" >/dev/null 2>&1; then
                GRADLE_WRAPPER_JAR="$CLASSPATH" \
                GRADLE_WRAPPER_BASE64="$BASE64_JAR" \
                "$py_cmd" - <<'PY'
import base64
import os
from pathlib import Path

jar_path = Path(os.environ["GRADLE_WRAPPER_JAR"])
base64_path = Path(os.environ["GRADLE_WRAPPER_BASE64"])

jar_path.parent.mkdir(parents=True, exist_ok=True)
data = base64_path.read_bytes()
jar_path.write_bytes(base64.b64decode(data))
PY
                if [ -f "$CLASSPATH" ]; then
                    restored=true
                    break
                fi
            fi
        done
    fi

    if [ "$restored" = "false" ]; then
        echo "Gradle wrapper JAR is missing and could not be restored. Ensure a base64 decoder (base64, python3, or python) is available." >&2
        exit 1
    fi
fi

if [ ! -f "$CLASSPATH" ]; then
    echo "Gradle wrapper JAR is missing. Please regenerate it with 'gradle wrapper'." >&2
    exit 1
fi

# Determine the Java command to use to start the JVM.
if [ -z "$JAVA_HOME" ] ; then
    JAVACMD="java"
else
    JAVACMD="$JAVA_HOME/bin/java"
fi

# Collect all arguments for the java command, following the shell quoting rules
set -- -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"

exec "$JAVACMD" "$@"
